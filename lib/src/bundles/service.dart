// Copyright (c) 2021 - 2022 Buijs Software
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import 'dart:convert';
import 'dart:io';

import '../../connect.dart';
import '../profiles/library.dart';
import '../shared/queries.dart';
import '../shared/service.dart';
import '../shared/client.dart';
import '../utils/nullsafe.dart';
import 'response.dart';

List<String> _warnings = [];

/// Service to access the Bundle IDs resource in App Store Connect API.
///
/// Source: https://developer.apple.com/documentation/appstoreconnectapi/bundle_ids.
///
/// Note: Apple documentation shows include option 'app' but at this moment it does not
/// work. Updated at 2022/05/05.
///
/// [Author] Gillian Buijs.
class BundlesService extends Service {
  BundlesService(AppStoreCredentials credentials, [AppStoreClient? client])
      : super(
          //man -_-
          credentials: credentials,
          path: '/bundleIds',
          client: client ?? AppStoreHttpClient(),
        );

  /// List Bundle IDs.
  Future<Result<BundleIdsResponse>> find({
    BundlesQuery Function(BundlesQuery)? bundles,
    ProfilesQuery Function(ProfilesQuery)? profiles,
    CapabilitiesQuery Function(CapabilitiesQuery)? capabilities,
  }) {
    final profilesQueryOrNull = Optional(profiles).mapOrNull((query) {
      // Params found so create a query.
      return query(ProfilesQuery());
    });

    final capabilitiesQueryOrNull = Optional(capabilities).mapOrNull((query) {
      // Params found so create a query.
      return query(CapabilitiesQuery());
    });

    final baseBundleQuery = BundlesQuery.init(
      // If capabilities query is provided then add includeCapabilities param.
      // By doing this the user does not have to add
      // ..includeCapabilities on the main query.
      includeCapabilities: capabilitiesQueryOrNull != null,
      // If profiles query is provided then add includeProfiles param.
      // By doing this the user does not have to add
      // ..includeProfiles on the main query.
      includeProfiles: profilesQueryOrNull != null,
    );

    // Create a query if there are parameters.
    // Return null if there are none.
    final bundlesQueryOrNull = Optional(bundles).mapOrNull((query) {
          // Params found so create a query.
          return query(baseBundleQuery);
        }) ??
        baseBundleQuery;

    return _doGet(
      bundleQuery: bundlesQueryOrNull,
      profilesQuery: profilesQueryOrNull,
      capabilitiesQuery: capabilitiesQueryOrNull,
    )
        .then((response) => Result<BundleIdsResponse>().create(
            warnings: _warnings,
            response: response,
            success: (response) => response.statusCode == 200,
            deserialize: (json) => BundleIdsResponse.fromJson(json)))
        .whenComplete(() => _warnings.clear());
  }

  /// Register a New Bundle ID.
  ///
  /// Param [identifier] the actual Bundle ID.
  /// Param [name] the name of the Bundle ID.
  /// Param [platform] IOS or MAC_OS.
  /// Param [seedId] Bundle ID prefix.
  /// If not specified it is automatically generated by App Store Connect API.
  ///
  /// Return [Result] containing a [BundleIdResponse].
  Future<Result<BundleIdResponse>> create({
    required String identifier,
    required String name,
    required BundleIdPlatform platform,
    String? seedId,
  }) {
    final request = BundleIdCreateRequest.create(
      identifier: identifier,
      name: name,
      platform: platform,
      seedId: seedId,
    );

    return _doPost(request)
        .then((response) => Result<BundleIdResponse>().create(
            warnings: _warnings,
            response: response,
            success: (response) => response.statusCode == 201,
            deserialize: (json) => BundleIdResponse.fromJson(json)))
        .whenComplete(() => _warnings.clear());
  }

  /// Modify a Bundle ID
  ///
  /// Update a specific bundle IDâ€™s name.
  Future<Result<BundleIdResponse>> modifyById(String id,
      {required String name}) {
    final params = <String>[id];

    final request = BundleIdUpdateRequest.create(
      id: id,
      name: name,
    );

    return _doPatch(request, params)
        .then((response) => Result<BundleIdResponse>().create(
            warnings: _warnings,
            response: response,
            success: (response) => response.statusCode == 200,
            deserialize: (json) => BundleIdResponse.fromJson(json)))
        .whenComplete(() => _warnings.clear());
  }

  ///Delete a Bundle ID
  Future<Result<bool>> deleteById(String id) {
    return _doDelete(params: [id])
        .then((response) => Result<bool>().create(
            warnings: _warnings,
            response: response,
            success: (response) => response.statusCode == 204,
            deserialize: (json) => response.statusCode == 204 ? true : false))
        .whenComplete(() => _warnings.clear());
  }

  /// Read Bundle ID Information
  ///
  /// Param [id] the actual Bundle ID.
  Future<Result<BundleIdResponse>> findById(String id,
      {BundleQuery Function(BundleQuery)? show}) {
    final params = <String>[id];
    final queryOrNull = Optional(show).mapOrNull((show) {
      // Params found so create a query.
      return show(BundleQuery());
    });

    return _doGet(params: params, bundleQuery: queryOrNull)
        .then((response) => Result<BundleIdResponse>().create(
            warnings: _warnings,
            response: response,
            success: (response) => response.statusCode == 200,
            deserialize: (json) => BundleIdResponse.fromJson(json)))
        .whenComplete(() => _warnings.clear());
  }

  /// List all profiles for a Bundle ID.
  ///
  /// Get a list of all profiles for a specific bundle ID.
  Future<Result<ProfilesResponse>> findProfilesById(String id,
      {ProfilesQuery Function(ProfilesQuery)? show}) {
    final params = <String>[id, "profiles"];
    final queryOrNull = Optional(show).mapOrNull((show) {
      // Params found so create a query.
      return show(ProfilesQuery(200));
    });

    return _doGet(params: params, profilesQuery: queryOrNull)
        .then((response) => Result<ProfilesResponse>().create(
            warnings: _warnings,
            response: response,
            success: (response) => response.statusCode == 200,
            deserialize: (json) => ProfilesResponse.fromJson(json)))
        .whenComplete(() => _warnings.clear());
  }

  /// List All Capabilities for a Bundle ID
  ///
  /// Get a list of all capabilities for a specific bundle ID.
  Future<Result<ProfilesResponse>> findCapabilitiesById(String id,
      {ProfilesQuery Function(ProfilesQuery)? show}) {
    final params = <String>[id, "bundleIdCapabilities"];
    final queryOrNull = Optional(show).mapOrNull((show) {
      // Params found so create a query.
      return show(ProfilesQuery(200));
    });

    return _doGet(params: params, profilesQuery: queryOrNull)
        .then((response) => Result<ProfilesResponse>().create(
            warnings: _warnings,
            response: response,
            success: (response) => response.statusCode == 200,
            deserialize: (json) => ProfilesResponse.fromJson(json)))
        .whenComplete(() => _warnings.clear());
  }

  /// Execute a GET with specified query and/or path parameters and return the response body as String.
  Future<HttpClientResponse> _doGet({
    BundleQuery? bundleQuery,
    ProfilesQuery? profilesQuery,
    CapabilitiesQuery? capabilitiesQuery,
    List<String>? params,
  }) {
    final query = <String, String>{};

    if (bundleQuery != null) {
      query.addAll(bundleQuery._createQueryMap);
    }

    if (profilesQuery != null) {
      query.addAll(profilesQuery._createQueryMap);
    }

    if (capabilitiesQuery != null) {
      query.addAll(capabilitiesQuery._createQueryMap);
    }

    if (query.isNotEmpty) super.query = query;

    if (params != null) super.params = params;

    return super.doGet;
  }

  /// Execute a POST with specified query and/or path parameters and return the response body as String.
  Future<HttpClientResponse> _doPost(BundleIdCreateRequest request) {
    return super.doPost(jsonEncode(request));
  }

  /// Execute a POST with specified query and/or path parameters and return the response body as String.
  Future<HttpClientResponse> _doPatch(
      BundleIdUpdateRequest request, List<String> params) {
    super.params = params;
    return super.doPatch(jsonEncode(request));
  }

  /// Execute a DELETE with specified path parameters.
  ///
  /// Return true if deleted or false if not.
  Future<HttpClientResponse> _doDelete({List<String>? params}) {
    if (params != null) super.params = params;
    return super.doDelete;
  }
}

/// Helper to construct query params for finding BundleIds with [BundlesService.find].
///
/// [Author] Gillian Buijs.
class BundlesQuery extends BundleQuery with QueryLimit {
  BundlesQuery();

  BundlesQuery.init({
    bool includeCapabilities = false,
    bool includeProfiles = false,
  }) {
    if (includeCapabilities) this.includeCapabilities;
    if (includeProfiles) this.includeProfiles;
  }

  /// Only return BundleIDs which matches an ID specified in this list.
  List<String> filterId = [];

  /// Only return BundleIDs which matches a identifier specified in this list.
  List<String> filterIdentifier = [];

  /// Only return BundleIDs which matches a name specified in this list.
  List<String> filterName = [];

  /// Only return BundleIDs which matches a seedId specified in this list.
  List<String> filterSeedId = [];

  /// Only return BundleIDs which matches a platform specified in this list.
  final List<BundleIdPlatform> _filterPlatform = <BundleIdPlatform>[];

  /// Sort the result list by specified fields.
  final List<_BundleIdsSort> _sort = [];

  /// Include more Bundle information:
  ///
  /// Possible values: app, bundleIdCapabilities, profiles.
  final List<_Include> _includes = [];

  /// Only return BundleIDs which matches a platform MacOS.
  void get filterPlatformIsMacOS {
    _filterPlatform.add(BundleIdPlatform.macOs);
  }

  /// Only return BundleIDs which matches a platform IOS.
  void get filterPlatformIsIOS {
    _filterPlatform.add(BundleIdPlatform.ios);
  }

  /// Include BundleIDs Capabilities information.
  void get includeCapabilities {
    _includes.add(_Include.bundleIdCapabilities);
  }

  /// Include BundleIDs Profile information.
  void get includeProfiles {
    _includes.add(_Include.profiles);
  }

  /// Sort the results by field id in ascending order.
  void get sortByIdAsc {
    _sort.add(_BundleIdsSort.idAsc);
  }

  /// Sort the results by field id in descending order.
  void get sortByIdDesc {
    _sort.add(_BundleIdsSort.idDesc);
  }

  /// Sort the results by field identifier in ascending order.
  void get sortByIdentifierAsc {
    _sort.add(_BundleIdsSort.identifierAsc);
  }

  /// Sort the results by field identifier in descending order.
  void get sortByIdentifierDesc {
    _sort.add(_BundleIdsSort.identifierDesc);
  }

  /// Sort the results by field name in ascending order.
  void get sortByNameAsc {
    _sort.add(_BundleIdsSort.nameAsc);
  }

  /// Sort the results by field name in descending order.
  void get sortByNameDesc {
    _sort.add(_BundleIdsSort.nameDesc);
  }

  /// Sort the results by field platform in ascending order.
  void get sortByPlatformAsc {
    _sort.add(_BundleIdsSort.platformAsc);
  }

  /// Sort the results by field platform in descending order.
  void get sortByPlatformDesc {
    _sort.add(_BundleIdsSort.platformDesc);
  }

  /// Sort the results by field seedId in ascending order.
  void get sortBySeedIdAsc {
    _sort.add(_BundleIdsSort.seedIdAsc);
  }

  /// Sort the results by field seedId in descending order.
  void get sortBySeedIdDesc {
    _sort.add(_BundleIdsSort.seedIdDesc);
  }

  /// Create a map containing the query parameter names and comma separated values.
  ///
  /// Example:
  ///
  /// Given a filterId list containing ["foo", "bar"]
  /// will return key 'filter[id]=foo,bar'.
  ///
  /// Returns Map<String,String> for all specified query parameters.
  @override
  Map<String, String> get _createQueryMap {
    final map = <String, String>{};

    if (filterId.isNotEmpty) {
      map.putIfAbsent("filter[id]", () => filterId.join(','));
    }

    if (filterIdentifier.isNotEmpty) {
      map.putIfAbsent(
        "filter[identifier]",
        () => filterIdentifier.join(','),
      );
    }

    if (filterName.isNotEmpty) {
      map.putIfAbsent(
        "filter[name]",
        () => filterName.join(','),
      );
    }

    if (_filterPlatform.isNotEmpty) {
      map.putIfAbsent(
        "filter[platform]",
        () => _filterPlatform.map((e) => e.value).join(','),
      );
    }

    if (filterSeedId.isNotEmpty) {
      map.putIfAbsent(
        "filter[seedId]",
        () => filterSeedId.join(','),
      );
    }

    if (_sort.isNotEmpty) {
      map.putIfAbsent("sort", () => _sort.map((e) => e.serialize).join(','));
    }

    if (limit != null) {
      map.putIfAbsent("limit", () => "$limit");
    }

    if (_fields.isNotEmpty) {
      map.putIfAbsent(
        "fields[bundleIds]",
        () => _fields.map((e) => e.name).join(','),
      );
    }

    if (_includes.isNotEmpty) {
      map.putIfAbsent(
        "include",
        () => _includes.map((e) => e.name).join(','),
      );
    }

    return map;
  }
}

/// Helper to construct query params for finding BundleIds with [BundlesService.find].
///
/// [Author] Gillian Buijs.
class ProfilesQuery with QueryLimit {
  ProfilesQuery([int maxLimit = 50]) {
    setMaxLimit(maxLimit);
  }

  /// If no fields are specified then all are returned.
  final List<_ProfilesFields> _fields = [];

  /// Configure the query to show bundleId field in the profiles section.
  void get showBundleId {
    _fields.add(_ProfilesFields.bundleId);
  }

  /// Configure the query to show certificates field in the profiles section.
  void get showCertificates {
    _fields.add(_ProfilesFields.certificates);
  }

  /// Configure the query to show devices field in the profiles section.
  void get showDevices {
    _fields.add(_ProfilesFields.devices);
  }

  /// Configure the query to show expirationDate field in the profiles section.
  void get showExpirationData {
    _fields.add(_ProfilesFields.expirationDate);
  }

  /// Configure the query to show name field in the profiles section.
  void get showName {
    _fields.add(_ProfilesFields.name);
  }

  /// Configure the query to show platform field in the profiles section.
  void get showPlatform {
    _fields.add(_ProfilesFields.platform);
  }

  /// Configure the query to show profileContent field in the profiles section.
  void get showProfileContent {
    _fields.add(_ProfilesFields.profileContent);
  }

  /// Configure the query to show profileState field in the profiles section.
  void get showProfileState {
    _fields.add(_ProfilesFields.profileState);
  }

  /// Configure the query to show profileType field in the profiles section.
  void get showProfileType {
    _fields.add(_ProfilesFields.profileType);
  }

  /// Configure the query to show uuid field in the profiles section.
  void get showUUID {
    _fields.add(_ProfilesFields.uuid);
  }

  /// Create a map containing the query parameter names and comma separated values.
  ///
  /// Example:
  ///
  /// Given a filterId list containing ["foo", "bar"]
  /// will return key 'filter[id]=foo,bar'.
  ///
  /// Returns Map<String,String> for all specified query parameters.
  Map<String, String> get _createQueryMap {
    final map = <String, String>{};

    if (limit != null) {
      map.putIfAbsent("limit", () => "$limit");
    }

    if (_fields.isNotEmpty) {
      map.putIfAbsent(
        "fields[profiles]",
        () => _fields.map((e) => e.name).join(','),
      );
    }

    return map;
  }
}

/// Helper to construct query params for finding BundleIds with [BundlesService.find].
///
/// [Author] Gillian Buijs.
class CapabilitiesQuery with QueryLimit {
  /// If no fields are specified then all are returned.
  final List<_CapabilitiesFields> _fields = [];

  /// Configure the query to show bundleId field in the capabilities section.
  void get showBundleId {
    _fields.add(_CapabilitiesFields.bundleId);
  }

  /// Configure the query to show capabilityType field in the capabilities section.
  void get showCapabilityType {
    _fields.add(_CapabilitiesFields.capabilityType);
  }

  /// Configure the query to show settings field in the capabilities section.
  void get showSettings {
    _fields.add(_CapabilitiesFields.settings);
  }

  /// Create a map containing the query parameter names and comma separated values.
  ///
  /// Example:
  ///
  /// Given a filterId list containing ["foo", "bar"]
  /// will return key 'filter[id]=foo,bar'.
  ///
  /// Returns Map<String,String> for all specified query parameters.
  Map<String, String> get _createQueryMap {
    final map = <String, String>{};

    if (limit != null) {
      setMaxLimit(50);
      map.putIfAbsent("limit", () => "$limit");
    }

    if (_fields.isNotEmpty) {
      map.putIfAbsent(
        "fields[bundleIdCapabilities]",
        () => _fields.map((e) => e.name).join(','),
      );
    }

    return map;
  }
}

/// Helper to construct query params for 'fields' filter only.
///
/// [Author] Gillian Buijs.
class BundleQuery {
  /// Filter which fields should be returned by the App Store Connect API.
  ///
  /// If no fields are specified then all are returned.
  final List<_BundleIdsFields> _fields = [];

  /// Configure the query to show capabilities field.
  void get showCapabilities {
    _fields.add(_BundleIdsFields.bundleIdCapabilities);
  }

  /// Configure the query to show identifier field.
  void get showIdentifier {
    _fields.add(_BundleIdsFields.identifier);
  }

  /// Configure the query to show name field.
  void get showName {
    _fields.add(_BundleIdsFields.name);
  }

  /// Configure the query to show platform field.
  void get showPlatform {
    _fields.add(_BundleIdsFields.platform);
  }

  /// Configure the query to show profiles field.
  void get showProfiles {
    _fields.add(_BundleIdsFields.profiles);
  }

  /// Configure the query to show seedId field.
  void get showSeedId {
    _fields.add(_BundleIdsFields.seedId);
  }

  /// Create a map containing the query parameter names and comma separated values.
  ///
  /// Example:
  ///
  /// Given a _fields list containing [_BundleIdsFields.serialNumber]
  /// will return key 'fields[certificates]=serialNumber'.
  ///
  /// Returns Map<String,String> for all specified query parameters.
  Map<String, String> get _createQueryMap {
    final map = <String, String>{};

    if (_fields.isNotEmpty) {
      map.putIfAbsent(
        "fields[bundleIds]",
        () => _fields.map((e) => e.name).join(','),
      );
    }

    return map;
  }
}

/// [Author] Gillian Buijs.
enum _Include { bundleIdCapabilities, profiles }

/// [Author] Gillian Buijs.
enum _CapabilitiesFields { bundleId, capabilityType, settings }

/// Documentation also contains value 'createdData' but at this moment the
/// App Store Connect API does not seem to support it. Updated at 2022/05/05.
///
/// [Author] Gillian Buijs.
enum _ProfilesFields {
  bundleId,
  certificates,
  devices,
  expirationDate,
  name,
  platform,
  profileContent,
  profileState,
  profileType,
  uuid
}

/// [Author] Gillian Buijs.
enum _BundleIdsFields {
  bundleIdCapabilities,
  identifier,
  name,
  platform,
  profiles,
  seedId
}

/// Query parameters used to sort the [BundleIdsResponse].
///
/// [Author] Gillian Buijs.
enum _BundleIdsSort {
  idAsc,
  idDesc,
  identifierAsc,
  identifierDesc,
  nameAsc,
  nameDesc,
  platformAsc,
  platformDesc,
  seedIdAsc,
  seedIdDesc,
}

/// Helper to serialize [_BundleIdsSort] enumeration.
///
/// [Author] Gillian Buijs.
extension _BundleIdsSortExt on _BundleIdsSort {
  String get serialize {
    switch (this) {
      case _BundleIdsSort.identifierAsc:
        return "identifier";
      case _BundleIdsSort.identifierDesc:
        return "-identifier";
      case _BundleIdsSort.nameAsc:
        return "name";
      case _BundleIdsSort.nameDesc:
        return "-name";
      case _BundleIdsSort.idAsc:
        return "id";
      case _BundleIdsSort.idDesc:
        return "-id";
      case _BundleIdsSort.platformAsc:
        return "platform";
      case _BundleIdsSort.platformDesc:
        return "-platform";
      case _BundleIdsSort.seedIdAsc:
        return "seedId";
      case _BundleIdsSort.seedIdDesc:
        return "-seedId";
    }
  }
}
